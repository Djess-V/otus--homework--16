!function(){"use strict";const e=function e(t,n,r,...o){if("function"!=typeof t)throw new Error("Reducer is not a function");if("function"==typeof n&&"function"==typeof r||"function"==typeof r&&"function"==typeof o[0])throw new Error("You passed the initial state as a function or the wrong number of parameters");if("function"==typeof n&&void 0===r&&(console.log("Override enchancer if enchancer is passed as a second parameter (in the absence of preloadedState)"),r=n,n=void 0),void 0!==r){if("function"!=typeof r)throw new Error("Enchancer is not a function");return r(e)(t,n)}let c=t,u=n,i=new Map,s=i,a=0,f=!1;function p(){s===i&&(s=new Map,i.forEach(((e,t)=>{s.set(t,e)})))}return{dispatch:function(e){if(!function(e){if("object"!=typeof e||null===e)return!1;let t=e;for(;null!==Object.getPrototypeOf(t);)t=Object.getPrototypeOf(t);return Object.getPrototypeOf(e)===t}(e))throw new Error("Actions is not a plain objects.");if(void 0===e.type)throw new Error('Actions may not have an undefined "type" property.');if("string"!=typeof e.type)throw new Error('Action "type" property must be a string.');if(f)throw new Error("Reducers may not dispatch actions.");try{f=!0,u=c(u,e)}finally{f=!1}return i=s,i.forEach((e=>{e()})),e},subscribe:function(e){if("function"!=typeof e)throw new Error("Listener is not a function");if(f)throw new Error("You may not call store.subscribe() while the reducer is executing.");let t=!0;p(),a+=1;const n=a;return s.set(n,e),function(){if(t){if(f)throw new Error("You may not unsubscribe from a store listener while the reducer is executing.");t=!1,p(),s.delete(n),i=null}}},getState:function(){if(f)throw new Error("You may not call store.getState() while the reducer is executing.");return u},replaceReducer:function(e){if("function"!=typeof e)throw new Error("NextReducer is not a function");c=e}}}(((e={counter:5},t)=>{switch(t.type){case"inc":return{...e,counter:e.counter+1};case"dec":return{...e,counter:e.counter-1};case"plus":return{...e,counter:e.counter+t.payload};default:return e}}),{counter:5});document.getElementById("app").innerHTML=`\n  <h1>Counter: ${e.getState()?.counter}</h1>\n  <button class="inc">inc</button>\n  <button class="dec">dec</button>\n  <br />\n  <input type="number" value="3" /><button class="plus">plus</button>\n`;const t=document.querySelector(".inc"),n=document.querySelector(".dec"),r=document.querySelector(".plus"),o=document.querySelector('input[type="number"]'),c=document.querySelector("h1");t.addEventListener("click",(()=>e.dispatch({type:"inc"}))),n.addEventListener("click",(()=>e.dispatch({type:"dec"}))),r.addEventListener("click",(()=>e.dispatch({type:"plus",payload:Number(o.value)}))),e.subscribe((()=>c.innerHTML=`Counter: ${e.getState()?.counter}`))}();